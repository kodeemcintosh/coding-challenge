{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/kodeemcintosh/Repos/coding-challenge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kodeemcintosh/Repos/coding-challenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/kodeemcintosh/Repos/coding-challenge/pages/index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Header } from '@components/header';\nimport { Footer } from '@components/footer';\nimport { TicketItem } from '@components/ticket-item';\n\nvar IndexPage = function IndexPage(_ref) {\n  _s();\n\n  var _tickets$active;\n\n  var reports = _ref.reports;\n\n  var _useState = useState(reports),\n      tickets = _useState[0],\n      setTickets = _useState[1];\n\n  var handleResolveTicket = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:3000/api/reports/' + id, {\n                method: 'PUT',\n                body: JSON.stringify({\n                  payload: {\n                    ticketState: 'RESOLVED'\n                  }\n                })\n              });\n\n            case 2:\n              response = _context.sent;\n              setTickets(response);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleResolveTicket(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var handleBlockTicket = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch('http://localhost:3000/api/reports/' + id, {\n                method: 'PUT',\n                body: JSON.stringify({\n                  payload: {\n                    ticketState: 'BLOCKED'\n                  }\n                })\n              });\n\n            case 2:\n              response = _context2.sent;\n              setTickets(response);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleBlockTicket(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid mx-20\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm hover:shadow-lg duration-500 px-2 sm:px-6 md:px-2 py-4 my-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols\",\n          children: tickets === null || tickets === void 0 ? void 0 : (_tickets$active = tickets.active) === null || _tickets$active === void 0 ? void 0 : _tickets$active.map(function (_ref4) {\n            var id = _ref4.id,\n                type = _ref4.type,\n                status = _ref4.status,\n                message = _ref4.message;\n            return /*#__PURE__*/_jsxDEV(TicketItem, {\n              id: id,\n              type: type,\n              status: status,\n              message: message,\n              resolve: handleResolveTicket(id),\n              block: handleBlockTicket(id)\n            }, \"ticket-\".concat(id, \")\"), false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(IndexPage, \"XnszOXR89rFR3aYyX9NtTTEqWTU=\");\n\n_c = IndexPage;\nexport var __N_SSP = true;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/index.tsx"],"names":["useState","fetch","Header","Footer","TicketItem","IndexPage","reports","tickets","setTickets","handleResolveTicket","id","method","body","JSON","stringify","payload","ticketState","response","handleBlockTicket","active","map","type","status","message"],"mappings":";;;;;;;;;AACA,SAAwBA,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAMA,IAAMC,SAA6B,GAAG,SAAhCA,SAAgC,OAAiB;AAAA;;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,kBACrBN,QAAQ,CAACM,OAAD,CADa;AAAA,MAC7CC,OAD6C;AAAA,MACpCC,UADoC;;AAErD,MAAMC,mBAAmB;AAAA,yEAAG,iBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACHT,KAAK,CAAC,uCAAuCS,EAAxC,EAA4C;AACtEC,gBAAAA,MAAM,EAAE,KAD8D;AAEtEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,WAAW,EAAE;AADN;AADU,iBAAf;AAFgE,eAA5C,CADF;;AAAA;AACpBC,cAAAA,QADoB;AAU1BT,cAAAA,UAAU,CAACS,QAAD,CAAV;;AAV0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBR,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAYA,MAAMS,iBAAiB;AAAA,yEAAG,kBAAOR,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACDT,KAAK,CAAC,uCAAuCS,EAAxC,EAA4C;AACtEC,gBAAAA,MAAM,EAAE,KAD8D;AAEtEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,WAAW,EAAE;AADN;AADU,iBAAf;AAFgE,eAA5C,CADJ;;AAAA;AAClBC,cAAAA,QADkB;AAUxBT,cAAAA,UAAU,CAACS,QAAD,CAAV;;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBC,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAYA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,2FAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,oBACGX,OADH,aACGA,OADH,0CACGA,OAAO,CAAEY,MADZ,oDACG,gBAAiBC,GAAjB,CAAqB,iBAAwC;AAAA,gBAArCV,EAAqC,SAArCA,EAAqC;AAAA,gBAAjCW,IAAiC,SAAjCA,IAAiC;AAAA,gBAA3BC,MAA2B,SAA3BA,MAA2B;AAAA,gBAAnBC,OAAmB,SAAnBA,OAAmB;AAC5D,gCACE,QAAC,UAAD;AAEE,cAAA,EAAE,EAAEb,EAFN;AAGE,cAAA,IAAI,EAAEW,IAHR;AAIE,cAAA,MAAM,EAAEC,MAJV;AAKE,cAAA,OAAO,EAAEC,OALX;AAME,cAAA,OAAO,EAAEd,mBAAmB,CAACC,EAAD,CAN9B;AAOE,cAAA,KAAK,EAAEQ,iBAAiB,CAACR,EAAD;AAP1B,gCACiBA,EADjB;AAAA;AAAA;AAAA;AAAA,qBADF;AAWD,WAZA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAFF,eAqBE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aArBF;AAAA,kBADF;AAyBD,CAnDD;;GAAML,S;;KAAAA,S;;AAgEN,eAAeA,SAAf","sourcesContent":["\nimport { FC, useEffect, useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Header } from '@components/header';\nimport { Footer } from '@components/footer';\nimport { TicketItem } from '@components/ticket-item';\n\ninterface IndexPageProps {\n  reports: any;\n}\n\nconst IndexPage: FC<IndexPageProps> = ({ reports }) => {\n  const [ tickets, setTickets ] = useState(reports);\n  const handleResolveTicket = async (id: string) => {\n    const response = await fetch('http://localhost:3000/api/reports/' + id, {\n      method: 'PUT',\n      body: JSON.stringify({\n        payload: {\n          ticketState: 'RESOLVED'\n        }\n      })\n    });\n\n    setTickets(response);\n  }\n  const handleBlockTicket = async (id: string) => {\n    const response = await fetch('http://localhost:3000/api/reports/' + id, {\n      method: 'PUT',\n      body: JSON.stringify({\n        payload: {\n          ticketState: 'BLOCKED'\n        }\n      })\n    });\n\n    setTickets(response);\n  }\n  return (\n    <>\n      <Header />\n      <div className=\"grid mx-20\">\n        <div className=\"bg-white rounded-lg shadow-sm hover:shadow-lg duration-500 px-2 sm:px-6 md:px-2 py-4 my-6\">\n          <div className=\"grid grid-cols\">\n            {tickets?.active?.map(({ id, type, status, message }: any) => {\n              return(\n                <TicketItem\n                  key={`ticket-${id})`}\n                  id={id}\n                  type={type}\n                  status={status}\n                  message={message}\n                  resolve={handleResolveTicket(id)}\n                  block={handleBlockTicket(id)}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport async function getServerSideProps () {\n  const data = await fetch('http://0.0.0.0:3000/api/reports', { method: 'GET'});\n  const { reports } = await data.json();\n\n  return {\n    props: {\n      reports\n    }\n  }\n}\n\nexport default IndexPage;"]},"metadata":{},"sourceType":"module"}