{"ast":null,"code":"import connect from 'next-connect';\nimport rawReports from '@data/reports.json';\nlet reports = rawReports.elements.map(({\n  id,\n  state,\n  payload\n}) => {\n  var _payload$message;\n\n  return {\n    id,\n    type: payload.reportType,\n    status: state,\n    message: (_payload$message = payload.message) !== null && _payload$message !== void 0 ? _payload$message : ''\n  };\n});\nconst handler = connect();\nhandler.get('/', async ({}, res) => {\n  try {\n    const active = reports.filter(report => report.status === 'OPEN');\n    return res.status(200).send({\n      reports: {\n        active\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.get('/resolved', async ({}, res) => {\n  try {\n    const resolved = reports.filter(report => report.status === 'RESOLVED');\n    res.status(200).json({\n      reports: {\n        resolved\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.get('/blocked', async ({}, res) => {\n  try {\n    const blocked = reports.filter(report => report.status === 'BLOCKED');\n    res.status(200).json({\n      reports: {\n        blocked\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.put('/:reportId', async (req, res) => {\n  try {\n    if (!req.query.param) {\n      return res.status(304).json({\n        error: 'Empty reportId param'\n      });\n    }\n\n    const {\n      reportId\n    } = req.query;\n    reports = reports.map(item => {\n      if (item.id === reportId) {\n        item.status === req.body.ticketState;\n      }\n\n      return item;\n    });\n    reports = reports.filter(item => item.id !== reportId);\n    res.status(200).json({\n      reports\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nexport const config = {\n  api: {\n    bodyParser: false // Disallow body parsing, consume as stream\n\n  }\n};\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}