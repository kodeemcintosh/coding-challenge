{"ast":null,"code":"import { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\nconst handler = async (req, res) => {\n  try {\n    if (!req.body) {\n      return res.status(400).json({\n        error: 'Missing body payload'\n      });\n    }\n\n    if (!req.query.reportId) {\n      return res.status(400).json({\n        error: 'Empty reportId param'\n      });\n    }\n\n    const reportId = req.query.reportId.toString();\n    const {\n      ticketState\n    } = req.body;\n    await prisma.report.update({\n      where: {\n        id: reportId\n      },\n      data: {\n        status: ticketState\n      }\n    });\n    const reports = await prisma.report.findMany({\n      where: {\n        status: 'OPEN'\n      }\n    });\n    res.status(200).json({\n      reports\n    });\n    res.end();\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/api/reports/[reportId].ts"],"names":["PrismaClient","prisma","handler","req","res","body","status","json","error","query","reportId","toString","ticketState","report","update","where","id","data","reports","findMany","end","err","Error"],"mappings":"AAEA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;;AAEA,MAAME,OAAO,GAAG,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACnE,MAAI;AACF,QAAG,CAACD,GAAG,CAACE,IAAR,EAAc;AACZ,aAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,QAAG,CAACL,GAAG,CAACM,KAAJ,CAAUC,QAAd,EAAwB;AACtB,aAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAME,QAAQ,GAAGP,GAAG,CAACM,KAAJ,CAAUC,QAAV,CAAmBC,QAAnB,EAAjB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAkBT,GAAG,CAACE,IAA5B;AAEA,UAAMJ,MAAM,CAACY,MAAP,CAAcC,MAAd,CAAqB;AACzBC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEN;AADC,OADkB;AAIzBO,MAAAA,IAAI,EAAE;AACJX,QAAAA,MAAM,EAAEM;AADJ;AAJmB,KAArB,CAAN;AASA,UAAMM,OAAO,GAAG,MAAMjB,MAAM,CAACY,MAAP,CAAcM,QAAd,CAAuB;AAC3CJ,MAAAA,KAAK,EAAE;AACLT,QAAAA,MAAM,EAAE;AADH;AADoC,KAAvB,CAAtB;AAMAF,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEW,MAAAA;AAAF,KAArB;AACAd,IAAAA,GAAG,CAACgB,GAAJ;AACD,GA5BD,CA4BE,OAAMC,GAAN,EAAW;AACX,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;;AAAA;AACF,CAhCD;;AAmCA,eAAenB,OAAf","sourcesContent":["\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    if(!req.body) {\n      return res.status(400).json({ error: 'Missing body payload' });\n    }\n    if(!req.query.reportId) {\n      return res.status(400).json({ error: 'Empty reportId param' });\n    }\n    const reportId = req.query.reportId.toString();\n\n    const { ticketState } = req.body;\n\n    await prisma.report.update({\n      where: {\n        id: reportId\n      },\n      data: {\n        status: ticketState\n      }\n    });\n\n    const reports = await prisma.report.findMany({\n      where: {\n        status: 'OPEN'\n      }\n    });\n\n    res.status(200).json({ reports });\n    res.end();\n  } catch(err) {\n    throw new Error(err);\n  };\n};\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}