{"ast":null,"code":"import connect from 'next-connect';\nimport rawReports from '@data/reports.json';\nlet reports = rawReports.elements.map(({\n  id,\n  state,\n  payload\n}) => {\n  var _payload$message;\n\n  return {\n    id,\n    type: payload.reportType,\n    status: state,\n    message: (_payload$message = payload.message) !== null && _payload$message !== void 0 ? _payload$message : ''\n  };\n});\nconst handler = connect();\nhandler.get('/', async ({}, res) => {\n  try {\n    const active = reports.filter(report => report.status === 'OPEN');\n    return res.status(200).send({\n      reports: {\n        active\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.get('/resolved', async ({}, res) => {\n  try {\n    const resolved = reports.filter(report => report.status === 'RESOLVED');\n    res.status(200).json({\n      reports: {\n        resolved\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.get('/blocked', async ({}, res) => {\n  try {\n    const blocked = reports.filter(report => report.status === 'BLOCKED');\n    res.status(200).json({\n      reports: {\n        blocked\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.put('/:reportId', async (req, res) => {\n  try {\n    if (!req.query.param) {\n      return res.status(304).json({\n        error: 'Empty reportId param'\n      });\n    }\n\n    const {\n      reportId\n    } = req.query;\n    reports = reports.map(item => {\n      if (item.id === reportId) {\n        item.status === req.body.ticketState;\n      }\n\n      return item;\n    });\n    reports = reports.filter(item => item.id !== reportId);\n    res.status(200).json({\n      reports\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nexport const config = {\n  api: {\n    bodyParser: false // Disallow body parsing, consume as stream\n\n  }\n};\nexport default handler;","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/api/reports.tsx"],"names":["connect","rawReports","reports","elements","map","id","state","payload","type","reportType","status","message","handler","get","res","active","filter","report","send","err","Error","resolved","json","blocked","put","req","query","param","error","reportId","item","body","ticketState","config","api","bodyParser"],"mappings":"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","sourcesContent":["\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport connect from 'next-connect';\nimport rawReports from '@data/reports.json';\n\nlet reports = rawReports.elements.map(({ id, state, payload}) => {\n    return { id, type: payload.reportType, status: state, message: payload.message ?? '' };\n  });\n\nconst handler = connect<NextApiRequest, NextApiResponse>();\n\nhandler.get('/', async ({}, res) => {\n  try {\n    const active = reports.filter((report) => report.status === 'OPEN');\n\n    return res.status(200).send({ reports: { active } });\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\nhandler.get('/resolved', async ({}, res) => {\n  try {\n    const resolved = reports.filter((report) => report.status === 'RESOLVED');\n\n    res.status(200).json({ reports: { resolved } });\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\nhandler.get('/blocked', async ({}, res) => {\n  try {\n    const blocked = reports.filter((report) => report.status === 'BLOCKED');\n\n    res.status(200).json({ reports: { blocked } });\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\nhandler.put('/:reportId', async (req, res) => {\n  try {\n    if(!req.query.param) {\n      return res.status(304).json({ error: 'Empty reportId param' });\n    }\n\n    const { reportId } = req.query;\n    reports = reports.map((item) => {\n      if(item.id === reportId) {\n        item.status === req.body.ticketState;\n      }\n\n      return item;\n    });\n\n    reports = reports.filter((item) => item.id !== reportId);\n    res.status(200).json({ reports });\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\nexport const config = {\n  api: {\n    bodyParser: false, // Disallow body parsing, consume as stream\n  },\n};\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}