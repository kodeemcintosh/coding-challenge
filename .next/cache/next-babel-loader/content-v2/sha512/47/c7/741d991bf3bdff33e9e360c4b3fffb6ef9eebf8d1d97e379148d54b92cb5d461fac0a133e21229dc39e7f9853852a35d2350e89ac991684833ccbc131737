{"ast":null,"code":"import connect from 'next-connect';\nimport rawReports from '@data/reports.json';\nlet reports = rawReports.elements.map(({\n  id,\n  state,\n  payload\n}) => {\n  var _payload$message;\n\n  return {\n    id,\n    type: payload.reportType,\n    status: state,\n    message: (_payload$message = payload.message) !== null && _payload$message !== void 0 ? _payload$message : ''\n  };\n});\nconst handler = connect();\nhandler.get(async (req, res) => {\n  try {\n    let resolved = [];\n    let blocked = [];\n\n    if (req.query.resolved) {\n      resolved = reports.filter(report => report.status === 'RESOLVED');\n    }\n\n    if (req.query.blocked) {\n      blocked = reports.filter(report => report.status === 'BLOCKED');\n    }\n\n    const active = reports.filter(report => report.status === 'OPEN');\n    return res.status(200).json({\n      reports: {\n        active,\n        resolved,\n        blocked\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nhandler.put('/:reportId', async (req, res) => {\n  try {\n    if (!req.query.reportId) {\n      return res.status(304).json({\n        error: 'Empty reportId param'\n      });\n    }\n\n    const {\n      reportId\n    } = req.query;\n    reports = reports.map(item => {\n      if (item.id === reportId) {\n        item.status === req.body.ticketState;\n      }\n\n      return item;\n    });\n    reports = reports.filter(item => item.id !== reportId);\n    const active = reports.filter(report => report.status === 'OPEN');\n    const resolved = reports.filter(report => report.status === 'RESOLVED');\n    const blocked = reports.filter(report => report.status === 'BLOCKED');\n    res.status(200).json({\n      reports: {\n        active,\n        resolved,\n        blocked\n      }\n    });\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n});\nexport default handler;","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/api/reports.ts"],"names":["connect","rawReports","reports","elements","map","id","state","payload","type","reportType","status","message","handler","get","req","res","resolved","blocked","query","filter","report","active","json","err","Error","put","reportId","error","item","body","ticketState"],"mappings":"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","sourcesContent":["\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport connect from 'next-connect';\nimport rawReports from '@data/reports.json';\n\nlet reports = rawReports.elements.map(({ id, state, payload}) => {\n    return { id, type: payload.reportType, status: state, message: payload.message ?? '' };\n  });\n\nconst handler = connect();\n\nhandler.get(async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    let resolved: any = [];\n    let blocked: any = [];\n\n    if(req.query.resolved) {\n      resolved = reports.filter((report) => report.status === 'RESOLVED');\n    }\n\n    if(req.query.blocked) {\n      blocked = reports.filter((report) => report.status === 'BLOCKED');\n    }\n\n    const active = reports.filter((report) => report.status === 'OPEN');\n\n\n    return res.status(200).json({ reports: { active, resolved, blocked }});\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\nhandler.put('/:reportId', async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    if(!req.query.reportId) {\n      return res.status(304).json({ error: 'Empty reportId param' });\n    }\n\n    const { reportId } = req.query;\n    reports = reports.map((item) => {\n      if(item.id === reportId) {\n        item.status === req.body.ticketState;\n      }\n\n      return item;\n    });\n\n    reports = reports.filter((item) => item.id !== reportId);\n    const active = reports.filter((report) => report.status === 'OPEN');\n    const resolved = reports.filter((report) => report.status === 'RESOLVED');\n    const blocked = reports.filter((report) => report.status === 'BLOCKED');\n    res.status(200).json({ reports: { active, resolved, blocked } });\n  } catch(err) {\n    throw new Error(err);\n  };\n});\n\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}