{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/kodeemcintosh/Repos/coding-challenge/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kodeemcintosh/Repos/coding-challenge/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/kodeemcintosh/Repos/coding-challenge/pages/index.tsx\",\n    _this = this;\n\n// import fetch from 'isomorphic-unfetch';\nimport { Header } from '@components/header';\nimport { Footer } from '@components/footer';\nimport { TicketItem } from '@components/ticket-item';\n\nvar IndexPage = function IndexPage(_ref) {\n  var _reports$active;\n\n  var reports = _ref.reports;\n\n  var handleUpdateTicket = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, state) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://0.0.0.0:3000/api/reports/' + id, {\n                method: 'PUT',\n                // headers: {\n                //   \"Access-Control-Allow-Origin\": \"*\",\n                //   \"Content-Type\": \"text/plain\"\n                // },\n                body: JSON.stringify({\n                  payload: {\n                    ticketState: state\n                  }\n                })\n              });\n\n            case 2:\n              response = _context.sent;\n              response;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleUpdateTicket(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid mx-20\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm hover:shadow-lg duration-500 px-2 sm:px-6 md:px-2 py-4 my-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid grid-cols\",\n          children: reports === null || reports === void 0 ? void 0 : (_reports$active = reports.active) === null || _reports$active === void 0 ? void 0 : _reports$active.map(function (_ref3) {\n            var id = _ref3.id,\n                type = _ref3.type,\n                status = _ref3.status,\n                message = _ref3.message;\n            return /*#__PURE__*/_jsxDEV(TicketItem, {\n              id: id,\n              type: type,\n              status: status,\n              message: message,\n              resolve: function resolve() {\n                return handleUpdateTicket(id, 'RESOLVED');\n              },\n              block: function block() {\n                return handleUpdateTicket(id, 'BLOCKED');\n              }\n            }, \"ticket-\".concat(id, \")\"), false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = IndexPage;\nexport var __N_SSG = true;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/index.tsx"],"names":["Header","Footer","TicketItem","IndexPage","reports","handleUpdateTicket","id","state","fetch","method","body","JSON","stringify","payload","ticketState","response","active","map","type","status","message"],"mappings":";;;;;;;;AAEA;AACA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAiBA,IAAMC,SAA6B,GAAG,SAAhCA,SAAgC,OAAiB;AAAA;;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AACrD,MAAMC,kBAAkB;AAAA,yEAAG,iBAAOC,EAAP,EAAmBC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACFC,KAAK,CAAC,qCAAqCF,EAAtC,EAA0C;AACpEG,gBAAAA,MAAM,EAAE,KAD4D;AAEpE;AACA;AACA;AACA;AACAC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,WAAW,EAAEP;AADN;AADU,iBAAf;AAN8D,eAA1C,CADH;;AAAA;AACnBQ,cAAAA,QADmB;AAazBA,cAAAA,QAAQ;;AAbiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBV,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAeA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,2FAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,oBACGD,OADH,aACGA,OADH,0CACGA,OAAO,CAAEY,MADZ,oDACG,gBAAiBC,GAAjB,CAAqB,iBAAwC;AAAA,gBAArCX,EAAqC,SAArCA,EAAqC;AAAA,gBAAjCY,IAAiC,SAAjCA,IAAiC;AAAA,gBAA3BC,MAA2B,SAA3BA,MAA2B;AAAA,gBAAnBC,OAAmB,SAAnBA,OAAmB;AAC5D,gCACE,QAAC,UAAD;AAEE,cAAA,EAAE,EAAEd,EAFN;AAGE,cAAA,IAAI,EAAEY,IAHR;AAIE,cAAA,MAAM,EAAEC,MAJV;AAKE,cAAA,OAAO,EAAEC,OALX;AAME,cAAA,OAAO,EAAE;AAAA,uBAAMf,kBAAkB,CAACC,EAAD,EAAK,UAAL,CAAxB;AAAA,eANX;AAOE,cAAA,KAAK,EAAE;AAAA,uBAAMD,kBAAkB,CAACC,EAAD,EAAK,SAAL,CAAxB;AAAA;AAPT,gCACiBA,EADjB;AAAA;AAAA;AAAA;AAAA,qBADF;AAWD,WAZA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aAFF,eAqBE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aArBF;AAAA,kBADF;AAyBD,CAzCD;;KAAMH,S;;AA2CN,eAAeA,SAAf","sourcesContent":["\nimport { FC } from 'react';\n// import fetch from 'isomorphic-unfetch';\nimport { Header } from '@components/header';\nimport { Footer } from '@components/footer';\nimport { TicketItem } from '@components/ticket-item';\n\nexport async function getStaticProps () {\n  const data = await fetch('http://0.0.0.0:3000/api/reports', { method: 'GET'});\n  const { reports } = await data.json();\n\n  return {\n    props: {\n      reports\n    }\n  }\n}\n\ninterface IndexPageProps {\n  reports: any;\n}\n\nconst IndexPage: FC<IndexPageProps> = ({ reports }) => {\n  const handleUpdateTicket = async (id: string, state: string) => {\n    const response = await fetch('http://0.0.0.0:3000/api/reports/' + id, {\n      method: 'PUT',\n      // headers: {\n      //   \"Access-Control-Allow-Origin\": \"*\",\n      //   \"Content-Type\": \"text/plain\"\n      // },\n      body: JSON.stringify({\n        payload: {\n          ticketState: state\n        }\n      })\n    });\n    response;\n  }\n  return (\n    <>\n      <Header />\n      <div className=\"grid mx-20\">\n        <div className=\"bg-white rounded-lg shadow-sm hover:shadow-lg duration-500 px-2 sm:px-6 md:px-2 py-4 my-6\">\n          <div className=\"grid grid-cols\">\n            {reports?.active?.map(({ id, type, status, message }: any) => {\n              return(\n                <TicketItem\n                  key={`ticket-${id})`}\n                  id={id}\n                  type={type}\n                  status={status}\n                  message={message}\n                  resolve={() => handleUpdateTicket(id, 'RESOLVED')}\n                  block={() => handleUpdateTicket(id, 'BLOCKED')}\n                />\n              )\n            })}\n          </div>\n        </div>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}