{"ast":null,"code":"import { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\nconst handler = async (req, res) => {\n  try {\n    console.log('REQ: ', req);\n\n    if (!req.query.reportId) {\n      return res.status(304).json({\n        error: 'Empty reportId param'\n      });\n    }\n\n    const reportId = req.query.reportId.toString();\n    const {\n      payload\n    } = req.body.json();\n\n    if (payload.ticketState !== 'RESOLVED' || payload.ticketState !== 'BLOCKED') {\n      res.end();\n      return;\n    }\n\n    const count = await prisma.report.count({\n      where: {\n        id: reportId\n      }\n    });\n\n    if (count === 0) {\n      res.end();\n      return;\n    }\n\n    await prisma.report.update({\n      where: {\n        id: reportId\n      },\n      data: {\n        status: payload.ticketState\n      }\n    });\n    const reports = await prisma.report.findMany({\n      where: {\n        status: 'OPEN'\n      }\n    });\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.status(200).json({\n      reports\n    });\n    return res;\n  } catch (err) {\n    throw new Error(err);\n  }\n\n  ;\n};\n\nexport default handler;","map":{"version":3,"sources":["/Users/kodeemcintosh/Repos/coding-challenge/pages/api/reports/[reportId].ts"],"names":["PrismaClient","prisma","handler","req","res","console","log","query","reportId","status","json","error","toString","payload","body","ticketState","end","count","report","where","id","update","data","reports","findMany","setHeader","err","Error"],"mappings":"AAEA,SAASA,YAAT,QAA6B,gBAA7B;AAEA,MAAMC,MAAM,GAAG,IAAID,YAAJ,EAAf;;AAEA,MAAME,OAAO,GAAG,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AACnE,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,GAArB;;AACA,QAAG,CAACA,GAAG,CAACI,KAAJ,CAAUC,QAAd,EAAwB;AACtB,aAAOJ,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAP;AACD;;AACD,UAAMH,QAAQ,GAAGL,GAAG,CAACI,KAAJ,CAAUC,QAAV,CAAmBI,QAAnB,EAAjB;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAcV,GAAG,CAACW,IAAJ,CAASJ,IAAT,EAApB;;AACA,QAAGG,OAAO,CAACE,WAAR,KAAwB,UAAxB,IAAsCF,OAAO,CAACE,WAAR,KAAwB,SAAjE,EAA4E;AAC1EX,MAAAA,GAAG,CAACY,GAAJ;AACA;AACD;;AAED,UAAMC,KAAK,GAAG,MAAMhB,MAAM,CAACiB,MAAP,CAAcD,KAAd,CAAoB;AACtCE,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEZ;AADC;AAD+B,KAApB,CAApB;;AAKA,QAAGS,KAAK,KAAK,CAAb,EAAgB;AACdb,MAAAA,GAAG,CAACY,GAAJ;AACA;AACD;;AAED,UAAMf,MAAM,CAACiB,MAAP,CAAcG,MAAd,CAAqB;AACzBF,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAEZ;AADC,OADkB;AAIzBc,MAAAA,IAAI,EAAE;AACJb,QAAAA,MAAM,EAAEI,OAAO,CAACE;AADZ;AAJmB,KAArB,CAAN;AASA,UAAMQ,OAAO,GAAG,MAAMtB,MAAM,CAACiB,MAAP,CAAcM,QAAd,CAAuB;AAC3CL,MAAAA,KAAK,EAAE;AACLV,QAAAA,MAAM,EAAE;AADH;AADoC,KAAvB,CAAtB;AAMAL,IAAAA,GAAG,CAACqB,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACArB,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA;AAAF,KAArB;AACA,WAAOnB,GAAP;AACD,GAzCD,CAyCE,OAAMsB,GAAN,EAAW;AACX,UAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACD;;AAAA;AACF,CA7CD;;AAgDA,eAAexB,OAAf","sourcesContent":["\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nconst handler = async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    console.log('REQ: ', req);\n    if(!req.query.reportId) {\n      return res.status(304).json({ error: 'Empty reportId param' });\n    }\n    const reportId = req.query.reportId.toString();\n\n    const { payload } = req.body.json();\n    if(payload.ticketState !== 'RESOLVED' || payload.ticketState !== 'BLOCKED') {\n      res.end();\n      return;\n    }\n\n    const count = await prisma.report.count({\n      where: {\n        id: reportId\n      }\n    });\n    if(count === 0) {\n      res.end();\n      return;\n    }\n\n    await prisma.report.update({\n      where: {\n        id: reportId\n      },\n      data: {\n        status: payload.ticketState\n      }\n    });\n\n    const reports = await prisma.report.findMany({\n      where: {\n        status: 'OPEN'\n      }\n    });\n\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.status(200).json({ reports });\n    return res;\n  } catch(err) {\n    throw new Error(err);\n  };\n};\n\n\nexport default handler;\n"]},"metadata":{},"sourceType":"module"}